/*
  color helper functions + mixins
*/

@function contrast($color) {
  @if (lightness($color) > 40) {
    @return color(white);
  }
  @return color(black);
}

@function tint($color, $percentage) {
  @return mix(white, $color, $percentage);
}

@function shade($color, $percentage) {
  @return mix(black, $color, $percentage);
}

@mixin background-color($background, $color: contrast($background)) {
  background: $background;
  color: $color;
}


/*
  initial colors
*/

$color-crimson: #de3c4b;
$color-sea: #388659;
$color-slate: #676980;
$color-taupe: #b6b0af;


/*
  color by name
*/

$colors: (
  crimson: $color-crimson,
  sea: $color-sea,
  slate: $color-slate,
  taupe: $color-taupe,
  
  black: shade($color-slate, 33),
  white: tint($color-taupe, 90),

  neutral: (
    1: tint($color-taupe, 80),
    2: tint($color-taupe, 65),
    3: tint($color-taupe, 45),
    4: tint($color-taupe, 25),
    5: $color-taupe,
  ),

  primary: (
    1: $color-slate,
    2: shade($color-slate, 15),
  ),
);


/*
  color accessor function
*/

@function color($keys...) {
  $value: $colors;

  @each $key in $keys {
    $value: map-get($value, $key);
  }

  @return $value;
}


/*
  color by element property
*/

$colors: map-merge($colors, (
  border: color(neutral, 3),
));


/*
  color by element
*/

$colors: map-merge($colors, (

));
